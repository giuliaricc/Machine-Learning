import pandas as pd
import numpy as np
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error
import xgboost as xgb

# ---------------------
# STEP 1: Preprocessing
# ---------------------

# Caricamento del dataset di training giÃ  pulito
train_data = pd.read_excel("C:\\Users\\giuli\\Downloads\\save_train.xls")

# Separazione delle feature (X) e del target (y)
X_train = train_data.drop("SalePrice", axis=1)
y_train = train_data["SalePrice"]

# ---------------------
# STEP 2: Feature Engineering ðŸš€
# ---------------------

X_train = X_train.assign(
    TotalSF = X_train['1stFlrSF'] + X_train['2ndFlrSF'],
    ExterQuality = (X_train['ExterQual'] + X_train['ExterCond']) / 2,
    BasementQuality = (X_train['BsmtQual'] + X_train['BsmtCond']) / 2,
    GarageQuality = (X_train['GarageQual'] + X_train['GarageCond']) / 2,
    IsRemodeled = np.where(X_train['YearBuilt'] != X_train['YearRemodAdd'], 1, 0),
    TotalBath = X_train['FullBath'] + X_train['HalfBath'] + X_train['BsmtFullBath'],
    LotRatio = np.where(X_train['TotalSF'] > 0, X_train['LotArea'] / X_train['TotalSF'], np.nan),
    GarageToLotRatio = np.where(X_train['LotArea'] > 0, X_train['GarageArea'] / X_train['LotArea'], np.nan),
    TotalPorchSF = X_train['OpenPorchSF'] + X_train['WoodDeckSF'],
    BasementFinishRatio = np.where((X_train['BsmtUnfSF'] + X_train['BsmtFullBath']) > 0,
                                   X_train['BsmtFullBath'] / (X_train['BsmtUnfSF'] + X_train['BsmtFullBath']), np.nan),
    HouseAge = 2024 - X_train['YearBuilt'],
    GarageAge = 2024 - X_train['GarageYrBlt'],
    PremiumNeighborhood = np.where((X_train['Neighborhood_NoRidge'] == 1) |
                                    (X_train['Neighborhood_NridgHt'] == 1) |
                                    (X_train['Neighborhood_StoneBr'] == 1), 1, 0),
    LotShapeScore = np.select([X_train['LotShape_Reg'] == 1,
                               X_train['LotShape_IR1'] == 1,
                               X_train['LotShape_IR2'] == 1],
                              [3, 2, 1], default=0),
    LogLotArea = np.log1p(X_train['LotArea']),
    LogMasVnrArea = np.log1p(X_train['MasVnrArea']),
    LogBsmtUnfSF = np.log1p(X_train['BsmtUnfSF']),
    LogGarageArea = np.log1p(X_train['GarageArea']),
    OverallQuality_Space = X_train['OverallQual'] * X_train['TotalSF'],
    GarageScore = X_train['GarageCars'] * X_train['GarageArea']
)

# Sostituzione di NaN con la media della colonna
X_train = X_train.fillna(X_train.mean())

# Conversione in formato XGBoost
dtrain = xgb.DMatrix(data=X_train, label=y_train)

# ---------------------
# STEP 3: Ottimizzazione delle iterazioni
# ---------------------

cv_results = xgb.cv(
    params={
        'max_depth': 6,
        'eta': 0.1,
        'subsample': 0.8,
        'colsample_bytree': 0.8,
        'objective': 'reg:squarederror'
    },
    dtrain=dtrain,
    num_boost_round=1000,
    nfold=5,
    early_stopping_rounds=10,
    metrics='rmse',
    verbose_eval=True
)

best_nrounds = cv_results.shape[0]
print(f"Numero ottimale di iterazioni: {best_nrounds}")

# ---------------------
# STEP 4: Addestramento finale
# ---------------------

xgb_model = xgb.train(
    params={
        'max_depth': 6,
        'eta': 0.1,
        'subsample': 0.8,
        'colsample_bytree': 0.8,
        'objective': 'reg:squarederror'
    },
    dtrain=dtrain,
    num_boost_round=best_nrounds
)

# ---------------------
# STEP 5: Risultati
# ---------------------

y_pred_train = xgb_model.predict(dtrain)
rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
rsquared = np.corrcoef(y_pred_train, y_train)[0, 1] ** 2

print(f"RMSE: {rmse:.2f}")
print(f"RÂ²: {rsquared:.15f}")

# ---------------------
# STEP 6: Preprocessing del test set
# ---------------------

test_data = pd.read_excel("C:\\Users\\giuli\\Downloads\\save_test.xls")

# Applicare le stesse trasformazioni
test_data = test_data.fillna(test_data.mean())
dtest = xgb.DMatrix(data=test_data)

# ---------------------
# STEP 7: Previsioni
# ---------------------

predictions = xgb_model.predict(dtest)

# ---------------------
# STEP 8: Submission
# ---------------------

submission = pd.read_csv("C:\\Users\\giuli\\OneDrive\\Desktop\\ERASMUS\\Esami ENSIIE\\Modelisation Statistique\\TP2\\home-data-for-ml-course\\sample_submission.csv")
submission['SalePrice'] = predictions
submission.to_csv("C:\\Users\\giuli\\OneDrive\\Desktop\\ERASMUS\\Esami ENSIIE\\Modelisation Statistique\\TP2\\home-data-for-ml-course\\xgb_submission_5.csv", index=False)

print("File di submission creato con successo: xgb_submission_5.csv")
